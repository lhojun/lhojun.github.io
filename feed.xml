<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://danu.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://danu.dev/" rel="alternate" type="text/html" /><updated>2022-02-20T16:43:37+09:00</updated><id>https://danu.dev/feed.xml</id><title type="html">DANU Dev</title><subtitle>DANU's Devlog</subtitle><author><name>이단우</name></author><entry><title type="html">M1 맥 개발환경 설정 - (1) 홈브루(Homebrew) 설치</title><link href="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-1/" rel="alternate" type="text/html" title="M1 맥 개발환경 설정 - (1) 홈브루(Homebrew) 설치" /><published>2022-02-19T00:00:00+09:00</published><updated>2022-02-19T00:00:00+09:00</updated><id>https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-1</id><content type="html" xml:base="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-1/">&lt;blockquote&gt;
  &lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

  &lt;p&gt;M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;1-homebrew-설치&quot;&gt;1. Homebrew 설치.&lt;/h3&gt;

  &lt;p&gt;Homebrew(홈브루)는 Mac OS용 패키지 관리자이다. (apt-get과 비슷한 느낌) 사실 맥북을 쓴 지 벌써 3년이 되었지만, 여전히 이 Homebrew가 주는 장점이 무엇인지는 잘 체감하지 못하고 있는데, 그도 그럴것이 난 기본적으로 크게 문제가 생기지 않으면 구버전의 프로그램이나, 패키지를 쓰는 것을 크게 개의치 않아하고, 무엇보다 크게 문제가 생기면 삭제했다가 아예 재설치를 하거나 스택 오버플로우를 뒤져 땜질을 해가며 고쳐나가기 때문에 버전을 유동적으로 스위칭하며 사용한 적이 없다. (개발자로써 아주 치명적인 단점)&lt;/p&gt;

  &lt;p&gt;어쨋든 설치는 해야지, 남들이 좋다는거 따라써서 크게 손해보는 경우는 없더라 그리고 이번 맥북부터는 좀 잘 관리해보려고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://brew.sh&quot;&gt;brew.sh&lt;/a&gt;로 이동한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-1.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install Homebrew에 있는 코드를 복사하여 터미널에 붙여넣는다.&lt;br /&gt;
글을 쓰는 시점인 2022년 2월 5일 시점엔 아래와 같다.&lt;br /&gt;
다를 수 있으니 홈페이지의 코드를 신뢰하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-2.png&quot; /&gt;
&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-3.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;그러면 비밀번호를 입력하라고 뜬다. 맥의 비밀번호를 입력해주자.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-4.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;진행을 계속 하고싶으면 RETURN(엔터) 키를 누르라고 한다. 눌러주자.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-5.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;빠르게 설치가 진행되고나면, 가장 아래의 Next steps에서 해야 할 일을 알려준다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;터미널에 아래 커맨드 두 줄을 쳐주자.&lt;br /&gt;
PATH에 Homebrew를 추가하기 위한 작업이다.&lt;br /&gt;
커맨드 역시 다를 수 있으니, 본인 터미널에 뜬 커맨드를 복사해서 붙여넣자!&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-6.png&quot; /&gt;
&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo 'eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;' &amp;gt;&amp;gt; /Users/사용자이름/.zprofile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-7.png&quot; /&gt;
&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;완료하고 나면 터미널을 껐다 켠 다음 brew 명령어를 통해 설치가 잘 되었는지 확인해보자.&lt;br /&gt;
시키는대로만 잘 따라했으면 특별히 안 될 이유는 없을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-8.png&quot; /&gt;
&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-9.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;이렇게 뜬다면 잘 된것이다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;Homebrew를 통해 visual studio code (vscode라고 흔히 부르는)와 iterm2를 설치해보겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-10.png&quot; /&gt;
&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install --cask visual-studio-cde iterm2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-homebrew/homebrew-2022-02-19-11.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;설치도 잘 되었다!&lt;/center&gt;</content><author><name>이단우</name></author><category term="맥 OS" /><category term="홈브루" /><category term="환경설정" /><summary type="html">서론 M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다.</summary></entry><entry><title type="html">M1 맥 개발환경 설정 - (2) iTerm2 설치 및 설정</title><link href="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-2/" rel="alternate" type="text/html" title="M1 맥 개발환경 설정 - (2) iTerm2 설치 및 설정" /><published>2022-02-19T00:00:00+09:00</published><updated>2022-02-19T00:00:00+09:00</updated><id>https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-2</id><content type="html" xml:base="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-2/">&lt;blockquote&gt;
  &lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

  &lt;p&gt;M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다.&lt;/p&gt;

  &lt;h3 id=&quot;iterm2-설치-및-설정&quot;&gt;iTerm2 설치 및 설정&lt;/h3&gt;

  &lt;p&gt;난 원래 순정 터미널 사용자였지만, 기왕 맥북을 바꾼김에 터미널도 새것처럼 써보자 싶어서 유명한 iTerm2를 깔고 설정을 하게 되었다. 사실 이전에도 몇번 쓰려고 시도해봤는데 생각보다 내가 꾸며놓은게 마음에 들지 않아서 몇번 하차했다가 이번엔 꽤 오래 탑승중이라서 글로 쓰게 되었다. 참고로 이 글은 ‘노마드코더’의 ‘&lt;a href=&quot;https://youtu.be/B26yiuC5zPM&quot;&gt;개발자를 위한 M1 풀옵션 맥북프로 세팅!&lt;/a&gt;’ 영상을 보고 따라했다! 디테일한 설정만 본인의 취향에 따라 설정하고, 전체적인 진행과정은 같기때문에 영상을 보고 하는 것도 추천한다! (고마워요 니콜라스형!)&lt;/p&gt;

  &lt;h3 id=&quot;이-글은-아래-과정을-진행했다는-가정하에-진행된다&quot;&gt;이 글은 아래 과정을 진행했다는 가정하에 진행된다.&lt;/h3&gt;

  &lt;p&gt;Homebrew가 안깔려있다면 꼭 아래 글을 보고 깔고 오자!&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/맥 OS/Mac-OS-settings-1&quot;&gt;M1 맥 개발환경 설정 - (1) 홈브루(Homebrew) 설치&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;iTerm2를 설치하자! (Homebrew 글 마지막에서 설치 과정을 따라한 사람은 생략해도 된다!)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install --cask iterm2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-1.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설치가 완료되면 iTerm2를 실행하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-2.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;아주 밋밋하다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;커맨드(⌘ Command) 키와 쉼표(,)키를 눌러서 환경설정을 열어보자!&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-3.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Appearance 탭으로 이동하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-4.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Theme를 Minimal로 바꿔준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-5.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Profiles탭으로 이동하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-6.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Profiles내의 탭들중에서 Session으로 이동하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-7.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가장 하단의 Status bar enabled를 체크해준다. (iTerm2에서 상태바를 볼 수 있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-8.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;체크 후 바로 옆의 Configure Status Bar로 들어가면 보이는 화면이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-9.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;본인이 보고싶은 상태들을 드래그해서 옮기고, 하단의 Auto-Rainbow에서 Color Theme를 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-10.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;나같은 경우는 현재 디렉토리 정보, git 상태, CPU 사용량을 담았다. 본인의 취향에 따라 담으면 된다.&lt;/center&gt;
&lt;center&gt;Auto-Rainbow는 Automatic으로 설정해주었다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;이제 iTerm2의 컬러테마를 설정해주자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-11.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://iterm2colorschemes.com&quot; target=&quot;_blank&quot;&gt;iterm2colorschemes.com&lt;/a&gt;으로 이동해준다. iTerm2의 컬러테마를 무수히 공유해주고 있는 사이트이다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;본인이 마음에 드는 컬러테마를 선택하자. 난 Github Dark를 선택했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-12.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마음에 드는 컬러테마 이름의 링크를 누르고 들어가면 이런 XML들이 뜬다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-13.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 파일을 찾기 쉬운 곳에 저장하자. 사파리 기준으로 커맨드(⌘ Command) 키와 알파벳 s(S)키를 누르면 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-14.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이렇게 txt 파일로 저장이 된다. (굳이 txt파일로 안되었더라도, 아까 사이트에서 본 내용만 깔끔하게 담겨있다면 문제 없다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-15.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;확장자를 txt에서 itermcolors로 바꾸어주자. iTerm2의 컬러테마 파일 확장자이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-16.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.itermcolors 사용을 눌러주자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-17.png&quot; width=&quot;500px&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;참고로 이 알림이 안뜬다면 (아주 높은 확률로) 확장자를 바꾼게 아니라 파일 이름만 바꾸었을 가능성이 크다.&lt;/center&gt;
&lt;center&gt;그럴 땐 파일을 '우클릭 &amp;gt; 정보 가져오기 &amp;gt; 이름 및 확장자'에서 바로 바꾸어주거나, 확장자 가리기를 체크 해제하고 다시 바꾸면 된다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;잘 바뀌었다!&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-18.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다시 iTerm2로 돌아와서 Profiles 내의 Colors탭을 선택하고, 방금 받은 컬러테마 파일을 여기로 드래그해주자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-19.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그러면 Colors Scheme이 import되었다고 알려준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-20.png&quot; width=&quot;500px&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우측 하단의 Color Presets…를 눌러보면 방금 넣은 ‘GitHub Dark’(혹은 본인이 받은 컬러테마 이름)이 추가되어있다. 클릭해주자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-21.png&quot; width=&quot;500px&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그럼 색들이 바뀌어서 적용이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-22.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이제 환경설정은 끄고, iTerm2로 돌아가보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-23.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;아까보다 뭐가 많이 깔끔해졌다. 하지만 끝이 아니다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;oh-my-zsh를 깔아주자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-24.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://ohmyz.sh&quot; target=&quot;_blank&quot;&gt;oh-my-zsh 공식 홈페이지&lt;/a&gt;로 이동해준다.&lt;/center&gt;
&lt;center&gt;oh-my-zsh는 zsh의 설정을 조금 더 쉽게 관리하기 위한 프레임워크이다.&lt;/center&gt;
&lt;center&gt;플러그인이나 여러 테마를 적용할 수 있어 더 편리하게 사용 할 수 있다.&lt;/center&gt;
&lt;center&gt;맥 OS 카탈리나 이후부터는 터미널에서 zsh가 기본 설정으로 사용되지만,&lt;/center&gt;
&lt;center&gt;여전히 많은 사람들이 더 편리한 사용을 위해 oh-my-zsh를 설치하고있다.&lt;/center&gt;
&lt;center&gt;&lt;b&gt;누가봐도 눌러야 할 것 같이 생긴 Install oh-my-zsh를 눌러주자.&lt;/b&gt;&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;설치를 할 수 있는 커맨드가 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-25.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iTerm2에 붙여 넣어주자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-26.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;글을 쓰는 현재는 위와 같지만 달라질 수 있으니 홈페이지를 신뢰하자.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;억겁의 시간이 흐르고 나면 누가봐도 oh-my-zsh가 설치된 것 같은 화면이 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-27.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;KTX 타고 가면서 봐도 설치된 걸 알 수 있을 수준&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;그 다음으로 powerlevel10k를 설치해보자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-28.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;https://github.com/romkatv/powerlevel10k&quot; target=&quot;_blank&quot;&gt;powerlevel10k&lt;/a&gt; 깃허브로 이동해준다.&lt;/center&gt;
&lt;center&gt;powerlevel10k는 oh-my-zsh에 사용할 수 있는 테마이다.&lt;/center&gt;
&lt;center&gt;나 빼고 다 알고 있는 것 같던데 하마터면 길가다 'powerlevel10k 아세요?' 하는 질문에 '아니요?' 하고 답해서 간첩신고 당할 뻔 했다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;아래로 조금 내리다보면 Installation이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-29.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;누가봐도 눌러야할 것 같은 Manual &lt;b&gt;밑의 Oh My Zsh를 눌러주자&lt;/b&gt;&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;그러면 Oh My Zsh에서 어떻게 설치해야하는지 알려준다. 첫번째 커맨드를 복사하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-30.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iTerm2에 붙여 넣고 엔터를 쳐주자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-31.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;글을 쓰는 현재는 위와 같지만 달라질 수 있으니 홈페이지를 신뢰하자.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;~/.zshrc에서 테마 설정을 바꾸어주어야 한다. 아래 커맨드를 iTerm2에 입력해서 엔터를 치면 ~/.zshrc가 vscode에서 열린다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;code ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-32.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;code가 vscode를 여는 커맨드이기때문에, vscode가 안깔려있다면 안 열릴 것이다. vscode를 깔거나, 다른 편집기로 열어주자.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;ZSH_THEME를 바꾸어주자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-33.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;저장을 잊지말자!&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;~/.zshrc를 변경하면 터미널을 꼭 재시작해주어야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-34.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;터미널을 재실행하면 갑자기 분위기 설문조사가 시작된다.&lt;/center&gt;
&lt;center&gt;첫번째 질문은 powerlevel10k에 아주 적합한 폰트를 설치할것이냐?&lt;/center&gt;
&lt;center&gt;알파벳 y(Y)를 눌러 설치를 하고 진행한다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;폰트를 열심히 설치해주고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-35.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설치가 완료되면, iTerm2를 껐다 켜달라고 친절하게 부탁한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-36.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;알려준대로 커맨드(⌘ Command) 키와 알파벳 q(Q)키를 눌러서 iTerm2를 완전 종료하고 다시 켜주자&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;iTerm2를 재실행하면 본격적으로 powerlevel10k 설정이 시작된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-37.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;또 다시 갑자기 분위기 설문조사가 시작된다.&lt;/center&gt;
&lt;center&gt;---&amp;gt; 사이의 아이콘이 잘 보이는지 묻는다. &amp;lt;----&lt;/center&gt;
&lt;center&gt;폰트가 잘 설치 됐는지 확인하는 단계이다. 잘 보인다면 빠르게 알파벳 y(Y)를 눌러서 넘어가자.&lt;/center&gt;
&lt;center&gt;만약 선택을 잘못했다면 알파벳 r(R)키를 누르면 처음부터 다시 시작할 수 있다.&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-38.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;자물쇠&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-39.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;소용돌이 같이 생긴 데비안 로고&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-40.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;git,git마스코트,시계,다이아,집,폴더,폴더(outline),속도계?&lt;/center&gt;
&lt;center&gt;다양한 아이콘이 있다. 이 아이콘과 X가 서로 안겹치고 잘 나오냐고 묻는다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;이제 본격적으로 Prompt Style을 설정하는 단계이다. 본인이 원하는 스타일의 번호를 눌러 진행하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-41.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;나는 3번의 Rainbow로 설정할 것이다.&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-42.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;Character Set 선택. 나는 유니코드로 선택.&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-43.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;시간 표시 방식 선택&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-45.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;헤드의 끝부분을 어떤 디자인으로 할 것인지 물어본다.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-46.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;끝 부분의 디자인을 어떻게 할 것인지 물어본다.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-47.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;한 줄 표시 vs 두 줄 표시&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-48.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;헤드와 끝을 어떤 방식으로 이어서 표시할 것인지&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-49.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;프레임 표시 형식&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-50.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;나는 가운데 선을 긋는것을 선택했는데, 그 선의 색까지 물어보는 친절함을 보여준다.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-51.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;각 줄 사이를 어떤 넓이로 할 것인지&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-52.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;아이콘 적게 vs 많이&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-53.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;간결하게 vs TMI&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-54.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;헤더와 꼬리를 입력된 커맨드에도 띄울건지 vs 안 띄울건지&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-55.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;Instant Prompt 모드를 쓸 것인지 물어본다.&lt;/center&gt;
&lt;center&gt;이게 무엇인지 해서 읽어봤더니, zsh에서 플러그인이나 테마등을 로드하는데 시간이 오래 걸리는 경우가 있기때문에,&lt;/center&gt;
&lt;center&gt;로드를 다 하고 시작할 것인지, 일단 시작하고 로드할 것인지(Instant Prompt)를 물어 보는 것 같더라.&lt;/center&gt;
&lt;center&gt;1번을 권장한다고 해서 선택하고 넘어갔다.&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-56.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;이미 powerlevel10k 설정이 있다고 뒤집어 쓸 것인지 물어보는 내용이다.&lt;/center&gt;
&lt;center&gt;아마 첫 설치라면 이게 안뜰텐데, 나의 경우는 블로그에 글을 쓰기 위해 처음부터 다시 깔았는데,&lt;/center&gt;
&lt;center&gt;환경설정 파일이 남아있어서 뜨는 것 같다. 그래서 뒤집어 쓰게 하고 넘어갔다.&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-57.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;변경할 내용을 ~/.zshrc에 적용할지 물어본다.&lt;/center&gt;
&lt;center&gt;그렇게 많은 설정을 하게 해놓고 당연한걸 물어본다.&lt;/center&gt;
&lt;center&gt;여기서 no를 하면 본인이 직접 ~/.zshrc에 설정한 내용을 써주고 저장 해줘야한다.&lt;/center&gt;
&lt;center&gt;본인이 고통을 즐기는 편이 아니라면 알파벳 y(Y)를 눌러주자.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-iterm2/iterm2-2022-02-19-59.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;powerlevel10k 적용까지해서 iTerm2 설정이 모두 완료되었다.&lt;/center&gt;
&lt;center&gt;조금 귀찮았지만 아주 예쁜 터미널이 완성되었다!&lt;/center&gt;
&lt;center&gt;역대급으로 긴 내용이지만, 사실 설정 하나하나를 다 스크린샷으로 담았기 때문에 그런것이고,&lt;/center&gt;
&lt;center&gt;실제로는 얼마 걸리지 않는다. 차근차근 따라해보자!&lt;/center&gt;</content><author><name>이단우</name></author><category term="맥 OS" /><category term="환경설정" /><category term="터미널" /><category term="iTerm2" /><summary type="html">서론 M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다. iTerm2 설치 및 설정 난 원래 순정 터미널 사용자였지만, 기왕 맥북을 바꾼김에 터미널도 새것처럼 써보자 싶어서 유명한 iTerm2를 깔고 설정을 하게 되었다. 사실 이전에도 몇번 쓰려고 시도해봤는데 생각보다 내가 꾸며놓은게 마음에 들지 않아서 몇번 하차했다가 이번엔 꽤 오래 탑승중이라서 글로 쓰게 되었다. 참고로 이 글은 ‘노마드코더’의 ‘개발자를 위한 M1 풀옵션 맥북프로 세팅!’ 영상을 보고 따라했다! 디테일한 설정만 본인의 취향에 따라 설정하고, 전체적인 진행과정은 같기때문에 영상을 보고 하는 것도 추천한다! (고마워요 니콜라스형!) 이 글은 아래 과정을 진행했다는 가정하에 진행된다. Homebrew가 안깔려있다면 꼭 아래 글을 보고 깔고 오자! M1 맥 개발환경 설정 - (1) 홈브루(Homebrew) 설치</summary></entry><entry><title type="html">M1 맥 개발환경 설정 - (3) React Native 개발 환경 설정</title><link href="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-3/" rel="alternate" type="text/html" title="M1 맥 개발환경 설정 - (3) React Native 개발 환경 설정" /><published>2022-02-19T00:00:00+09:00</published><updated>2022-02-19T00:00:00+09:00</updated><id>https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-3</id><content type="html" xml:base="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-3/">&lt;blockquote&gt;
  &lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

  &lt;p&gt;M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다.&lt;/p&gt;

  &lt;h3 id=&quot;react-native-개발-환경-설정&quot;&gt;React Native 개발 환경 설정&lt;/h3&gt;

  &lt;p&gt;동아리에서 React Native로 앱을 개발한지 어언 1년이 지났다. 그 사이에 맥북을 3번이나 바꾸었는데, 언제나 가장 골치 아픈 부분은 React Native 환경 설정이었다. 누가 꼭 방해라도 하는 것 마냥 제대로 되지 않고, 심지어 M1으로 와서 그 난이도가 30배쯤 어려워졌다. 하지만 이제 수많은 실패 끝에 React Native 환경 설정로 학사 학위를 딸 수준 정도는 되었다고 생각하기 때문에 글로 정리해두려 한다.&lt;/p&gt;

  &lt;h3 id=&quot;이-글은-아래-두-가지-과정을-진행했다는-가정하에-진행된다&quot;&gt;이 글은 아래 두 가지 과정을 진행했다는 가정하에 진행된다.&lt;/h3&gt;

  &lt;p&gt;Homebrew와 iTerm2가 안깔려있다면 꼭 아래 글들을 보고 깔고 오자!&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/맥 OS/Mac-OS-settings-1&quot;&gt;M1 맥 개발환경 설정 - (1) 홈브루(Homebrew) 설치&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/맥 OS/Mac-OS-settings-2&quot;&gt;M1 맥 개발환경 설정 - (2) iTerm2 설치 및 설정&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;그 어느 것보다 먼저 해야 할 일이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-1.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;바로 Xcode 설치(앱스토어에서)와, 시뮬레이터(에뮬레이터) 다운로드이다.&lt;/center&gt;
&lt;center&gt;이 두가지가 이 모든 과정 진행시간의 90%이기 때문에 먼저 진행한다.&lt;/center&gt;
&lt;center&gt;Xcode를 다운로드 후 실행하면 나오는 이 화면에서 커맨드(⌘ Command) 키와 쉼표(,)키를 눌러서 설정으로 가주자.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;에뮬레이터를 다운로드하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-2.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;열린 설정 창에서 Components탭으로 가면 에뮬레이터를 깔 수 있다.&lt;/center&gt;
&lt;center&gt;나 같은 경우는 이미 환경설정이 완료된 상태에서 다 지우고 다시 하는 것이기 때문에 이미 15.0 버전이 깔려있다.&lt;/center&gt;
&lt;center&gt;차마 시뮬레이터까지 다시 깔기는 너무 귀찮았다.&lt;/center&gt;
&lt;center&gt;아무튼 좌측의 다운로드 아이콘을 눌러 다운로드를 진행해두고 아래 과정을 진행하자!&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;nvm을 설치해주자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install nvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-3.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;NVM; Node Version Manager&lt;/center&gt;
&lt;center&gt;노드의 버전을 유동적으로 사용할 수 있게 도와주는 아주 좋은 친구다.&lt;/center&gt;
&lt;center&gt;사실 일반적인 경우는 노드 버전을 굳이 바꿔가며 쓸 필요가 없겠지만&lt;/center&gt;
&lt;center&gt;나는 동아리의 개발 뿐만 아니라 가끔 Node.js로 프로젝트를 진행할 일이 있기 때문에 버전을 따로 관리하는게 편하더라.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;설치가 다 되면 여기서 해야 할 일이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-4.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;~/.zshrc 파일에 해당 내용을 추가해 주어야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export NVM_DIR=&quot;$HOME/.nvm&quot;
[ -s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] &amp;amp;&amp;amp; \. &quot;/opt/homebrew/opt/nvm/nvm.sh&quot;  # This loads nvm
[ -s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;amp;&amp;amp; \. &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-5.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;일단 복사를 해두자. 본인 터미널에 출력된 것을 신뢰하자.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;~/.zshrc 파일에 추가하고 저장하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-6.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;들여쓰기를 고쳐서 넣어주자. 그냥 붙여넣으면 2,3번 라인이 한 수준 아래로 내려가더라.&lt;/center&gt;
&lt;center&gt;그리고 저렇게 주석으로 내가 무엇을 할 때 이 설정을 넣었는지 구분 해두면 미래에 편하다!&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;iTerm2(터미널)를 재시작하고, nvm을 입력해본다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-7.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nvm 커맨드를 알려주는 글이 출력된다면 성공적으로 설치된 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-8.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그럼 설치 가능한 node의 버전을 보는 명령어를 입력해보자&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm ls-remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-9.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설치 가능한 버전들이 와르르 쏟아질 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-10.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;누가봐도 설치하고 싶은 가장 마지막 LTS버전을 설치하겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm install 16.14.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-11.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;설치가 완료되면, node 16.14.0이 기본으로 사용되도록 바뀐다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-12.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아래 두 명령어를 통해 node와 npm의 버전이 잘 되어 있는지 확인하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-13.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;노드 설치가 완료되었으면 거의 끝난 일이라고 볼 수 있다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;watchman을 설치하자&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install watchman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-14.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;watchman은 파일 변경을 실시간으로 감지해주는 친구인데,&lt;/center&gt;
&lt;center&gt;리액트 네이티브에선 변경된 소스를 자동 빌드하고 시뮬레이터로 업로드하기 위한 용도이다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;와르르 설치가 완료되고 나면, watchman 버전을 확인해서 설치가 잘 되었는지 보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;watchman --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-15.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;버전이 날짜로 뜨는게 iTerm2인가 Homebrew인가의 버그였던가 그랬던 것 같은데 어쨋든 뜨기만 하면 된 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-16.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다음으론 cocoapods를 설치해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-17.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;얘는 스위프트를 위한 의존성 관리 매니저이다.&lt;/center&gt;
&lt;center&gt;사실 이런거 몰라도 된다.&lt;/center&gt;
&lt;center&gt;비밀번호 입력을 해주자. (비밀번호 입력이 표시되지 않는 것에 당황하지 말자.)&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;설치가 잘 되었는지 버전을 확인해보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-18.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그 다음으로 ffi를 설치해주자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install ffi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-19.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;얘는 아마 'Foreign Function Interface'의 약자일텐데&lt;/center&gt;
&lt;center&gt;리액트 네이티브의 어디에서 얘가 쓰이는지는 사실 잘 모른다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;설치가 완료되고나면 드디어 대망의 React Native CLI를 설치해주자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g react-native-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-20.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;사실상 이 글의 가장 핵심&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;설치가 완료되고나면 또 다시 버전 확인으로 설치가 잘 되었는지 확인하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-21.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;사진이 없긴 한데, 버전이 뜨면 어쨋든 잘 된 것이다.&lt;/center&gt;
&lt;center&gt;사실 여기까지만 하면 끝이다. 프로젝트를 생성하고, 개발을 진행하면 된다.&lt;/center&gt;
&lt;h2 id=&quot;그런데&quot;&gt;그런데&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사실 이 글을 쓴 이유는 여기에 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-22.png&quot; /&gt;
&lt;/p&gt;
&lt;center&gt;우리 프로젝트가 의존하고 있는 다양한 라이브러리들을 설치하려면 위 커맨드를 꼭 쳐주어야 한다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;무수한 에러가 뜬다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm ERR! code 1
npm ERR! path /Users/danu/Desktop/프로젝트명/node_modules/sharp
npm ERR! command failed
npm ERR! command sh -c (node install/libvips &amp;amp;&amp;amp; node install/dll-copy &amp;amp;&amp;amp; prebuild-install) || (node-gyp rebuild &amp;amp;&amp;amp; node install/dll-copy)
npm ERR! TOUCH Release/obj.target/libvips-cpp.stamp
npm ERR!   CXX(target) Release/obj.target/sharp/src/common.o
npm ERR! info sharp Detected globally-installed libvips v8.12.2
npm ERR! info sharp Building from source via node-gyp
npm ERR! gyp info it worked if it ends with ok
npm ERR! gyp info using node-gyp@8.4.1
npm ERR! gyp info using node@16.14.0 | darwin | arm64
npm ERR! gyp info find Python using Python version 3.9.10 found at &quot;/opt/homebrew/opt/python@3.9/bin/python3.9&quot;
npm ERR! gyp info spawn /opt/homebrew/opt/python@3.9/bin/python3.9
npm ERR! gyp info spawn args [
npm ERR! gyp info spawn args   '/Users/danu/.nvm/versions/node/v16.14.0/lib/node_modules/npm/node_modules/node-gyp/gyp/gyp_main.py',
npm ERR! gyp info spawn args   'binding.gyp',
npm ERR! gyp info spawn args   '-f',
npm ERR! gyp info spawn args   'make',
npm ERR! gyp info spawn args   '-I',
npm ERR! gyp info spawn args   '/Users/danu/Desktop/프로젝트명/node_modules/sharp/build/config.gypi',
npm ERR! gyp info spawn args   '-I',
npm ERR! gyp info spawn args   '/Users/danu/.nvm/versions/node/v16.14.0/lib/node_modules/npm/node_modules/node-gyp/addon.gypi',
npm ERR! gyp info spawn args   '-I',
npm ERR! gyp info spawn args   '/Users/danu/Library/Caches/node-gyp/16.14.0/include/node/common.gypi',
npm ERR! gyp info spawn args   '-Dlibrary=shared_library',
npm ERR! gyp info spawn args   '-Dvisibility=default',
npm ERR! gyp info spawn args   '-Dnode_root_dir=/Users/danu/Library/Caches/node-gyp/16.14.0',
npm ERR! gyp info spawn args   '-Dnode_gyp_dir=/Users/danu/.nvm/versions/node/v16.14.0/lib/node_modules/npm/node_modules/node-gyp',
npm ERR! gyp info spawn args   '-Dnode_lib_file=/Users/danu/Library/Caches/node-gyp/16.14.0/&amp;lt;(target_arch)/node.lib',
npm ERR! gyp info spawn args   '-Dmodule_root_dir=/Users/danu/Desktop/프로젝트명/node_modules/sharp',
npm ERR! gyp info spawn args   '-Dnode_engine=v8',
npm ERR! gyp info spawn args   '--depth=.',
npm ERR! gyp info spawn args   '--no-parallel',
npm ERR! gyp info spawn args   '--generator-output',
npm ERR! gyp info spawn args   'build',
npm ERR! gyp info spawn args   '-Goutput_dir=.'
npm ERR! gyp info spawn args ]
npm ERR! gyp info spawn make
npm ERR! gyp info spawn args [ 'BUILDTYPE=Release', '-C', 'build' ]
npm ERR! In file included from ../src/common.cc:22:
npm ERR! In file included from /Users/danu/Library/Caches/node-gyp/16.14.0/include/node/node.h:63:
npm ERR! In file included from /Users/danu/Library/Caches/node-gyp/16.14.0/include/node/v8.h:30:
npm ERR! /Users/danu/Library/Caches/node-gyp/16.14.0/include/node/v8-internal.h:492:38: error: no template named 'remove_cv_t' in namespace 'std'; did you mean 'remove_cv'?
npm ERR!             !std::is_same&amp;lt;Data, std::remove_cv_t&amp;lt;T&amp;gt;&amp;gt;::value&amp;gt;::Perform(data);
npm ERR!                                 ~~~~~^~~~~~~~~~~
npm ERR!                                      remove_cv
npm ERR! /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1/type_traits:710:50: note: 'remove_cv' declared here
npm ERR! template &amp;lt;class _Tp&amp;gt; struct _LIBCPP_TEMPLATE_VIS remove_cv
npm ERR!                                                  ^
npm ERR! 1 error generated.
npm ERR! make: *** [Release/obj.target/sharp/src/common.o] Error 1
npm ERR! gyp ERR! build error
npm ERR! gyp ERR! stack Error: `make` failed with exit code: 2
npm ERR! gyp ERR! stack     at ChildProcess.onExit (/Users/danu/.nvm/versions/node/v16.14.0/lib/node_modules/npm/node_modules/node-gyp/lib/build.js:194:23)
npm ERR! gyp ERR! stack     at ChildProcess.emit (node:events:520:28)
npm ERR! gyp ERR! stack     at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)
npm ERR! gyp ERR! System Darwin 21.2.0
npm ERR! gyp ERR! command &quot;/Users/danu/.nvm/versions/node/v16.14.0/bin/node&quot; &quot;/Users/danu/.nvm/versions/node/v16.14.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;
npm ERR! gyp ERR! cwd /Users/danu/Desktop/프로젝트명/node_modules/sharp
npm ERR! gyp ERR! node -v v16.14.0
npm ERR! gyp ERR! node-gyp -v v8.4.1
npm ERR! gyp ERR! not ok

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/danu/.npm/_logs/2022-02-19T14_36_28_984Z-debug-0.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;누군가가 이 에러가 뜬다면 꼭 이 해결법을 시도해봤으면 해서 (안될수도 있지만) 에러코드를 일부러 다 붙여 넣는다.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-23.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;아주-골치-아픈-일이다&quot;&gt;아주 골치 아픈 일이다.&lt;/h2&gt;

&lt;center&gt;이거에 대해서 아주아주 많이 찾아보았는데.&lt;/center&gt;
&lt;center&gt;결론은 우리 동아리의 프로젝트에 포함된 패키지의 버전이 낮기 때문이다.&lt;/center&gt;
&lt;center&gt;찾아본 많은 글들에 의하면 우리 프로젝트의 react-native에 포함된&lt;/center&gt;
&lt;center&gt;node-sass의 버전이 노드 16버전을 지원하지 않고,&lt;/center&gt;
&lt;center&gt;내가 깐 노드의 버전이 16버전이라 발생하는 문제인데,&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;문제는 M1, 즉 Apple Silicon을 노드는 16버전부터 공식적으로 지원했다는 것이다.&lt;/center&gt;
&lt;center&gt;이렇게 되면 해결법이 총 세가지로 나뉜다.&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;b&gt;첫 번째&lt;/b&gt;는 로제타로 어찌저찌 잘 해보는 것인데, 나는 이 방법은 매우 선택하기 싫었다.&lt;/center&gt;
&lt;center&gt;골치 아파가며 로제타로 억지로 돌리긴 싫었기 때문인데,&lt;/center&gt;
&lt;center&gt;로제타 써서 한 것 중에 한번에 제대로 된 것이 없는 과거도 한 몫 했다.&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;&lt;b&gt;두 번째&lt;/b&gt;로 할 수 있는 선택은 react-native의 버전을 올리는 것이었다.&lt;/center&gt;
&lt;center&gt;그래서 잠깐 우리 동아리의 프로젝트에 시도해봤더니 의존성때문에 라이브러리들이 와르르 에러를 내뱉더라.&lt;/center&gt;
&lt;center&gt;도저히 그 모습을 볼 수가 없어서 포기했다.&lt;/center&gt;
&lt;center&gt;사실 너무 귀찮았다!&lt;/center&gt;

&lt;h2 id=&quot;겨우-찾아-낸-마지막-해결법&quot;&gt;겨우 찾아 낸 마지막 해결법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;바로 ‘npm install’ 대신 이걸 쓰는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CXXFLAGS=&quot;--std=c++17&quot; npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;그러면 놀랍게도 잘 된다.&lt;/center&gt;
&lt;center&gt;구형 node-sass의 소스에 표준 C++ 버전이 11로 되어 있어서 발생하는 버그인데,&lt;/center&gt;
&lt;center&gt;컴파일이 어쩌고 저쩌고.. 는 잘 모르겠고 17버전으로 강제해서 실행해주면 문제가 해결된다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;실행까지 확인하기 위해 pod install을 하러가자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-24.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pod install을 해주고&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-25.png&quot; /&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다시 프로젝트 폴더로 돌아와주자.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-26.png&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실행을 통해 잘 되는지 확인하자!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native run-ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/images/2022-02-19-react-native-install/react-native-install-2022-02-19-27.png&quot; /&gt;
&lt;/p&gt;

&lt;center&gt;실행이 잘 되었다면 정말 환경설정 끝!&lt;/center&gt;

&lt;center&gt;저 remove_cv 에러 때문에 몇 주를 고생을 했는데, github issues을 꼼꼼히 읽어보니 그 답이 있었다.&lt;/center&gt;
&lt;center&gt;앞으로도 영어라고 무작정 회피하지 말고 읽는 습관을 들여야겠다.&lt;/center&gt;</content><author><name>이단우</name></author><category term="맥 OS" /><category term="환경설정" /><category term="리액트 네이티브" /><summary type="html">서론 M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다. React Native 개발 환경 설정 동아리에서 React Native로 앱을 개발한지 어언 1년이 지났다. 그 사이에 맥북을 3번이나 바꾸었는데, 언제나 가장 골치 아픈 부분은 React Native 환경 설정이었다. 누가 꼭 방해라도 하는 것 마냥 제대로 되지 않고, 심지어 M1으로 와서 그 난이도가 30배쯤 어려워졌다. 하지만 이제 수많은 실패 끝에 React Native 환경 설정로 학사 학위를 딸 수준 정도는 되었다고 생각하기 때문에 글로 정리해두려 한다. 이 글은 아래 두 가지 과정을 진행했다는 가정하에 진행된다. Homebrew와 iTerm2가 안깔려있다면 꼭 아래 글들을 보고 깔고 오자! M1 맥 개발환경 설정 - (1) 홈브루(Homebrew) 설치 M1 맥 개발환경 설정 - (2) iTerm2 설치 및 설정</summary></entry><entry><title type="html">M1 맥 개발환경 설정 - (4) 안드로이드 스튜디오 설치</title><link href="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-4/" rel="alternate" type="text/html" title="M1 맥 개발환경 설정 - (4) 안드로이드 스튜디오 설치" /><published>2022-02-19T00:00:00+09:00</published><updated>2022-02-19T00:00:00+09:00</updated><id>https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-4</id><content type="html" xml:base="https://danu.dev/%EB%A7%A5%20os/Mac-OS-settings-4/">&lt;blockquote&gt;
  &lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

  &lt;p&gt;M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다.&lt;/p&gt;

  &lt;h3 id=&quot;안드로이드-스튜디오-설치&quot;&gt;안드로이드 스튜디오 설치&lt;/h3&gt;

  &lt;p&gt;최근 뜬금없이 안드로이드 앱 외주를 맡게 되었기 때문에 안드로이드 스튜디오를 깔 일이 생겼다. 리액트 네이티브 앱을 한창 개발 할 당시에는 인텔 맥을 쓰고 있어서 안드로이드 스튜디오를 까는 것이 신경쓰이는 일이 전혀 아니었는데, M1 맥 출시 초기에는 안드로이드 스튜디오가 지원이 안되는 치명적인 문제가 있었다. 그리고 그 뒤엔 어떤 개발자분께서 만든 M1 맥에서 돌아가는 버전을 썼는데 지금은 많은 개발자님들의 노고덕분에 아주 간단하게 설치할 수 있게 되었으니 빠르게 설치해보도록 하자!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;이전엔 github에서 어찌 저찌 다운로드 했던 것 같은데&lt;/center&gt;
&lt;center&gt;이젠 안드로이드 스튜디오 공식 다운로드 사이트에서 바로 다운로드 받을 수 있다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio&quot;&gt;https://developer.android.com/studio&lt;/a&gt;로 이동한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-1.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;누가봐도 눌러야 할 것 같은 버튼인 초록색의 Download Android Studio를 클릭하자.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;약관을 읽어주자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-2.png&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-3.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;약관에 동의를 하고, &lt;b&gt;우리는 M1 맥이기 때문에 이번엔 누르면 안될 것 같이 생긴 흰색의 Mac with Apple chip 버튼을 클릭하자.&lt;/b&gt;&lt;/center&gt;
&lt;center&gt;(아직까지 일반적인 경우엔 인텔 맥북을 더 많이 써서 저렇게 해놓은듯 하다.)&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;dmg 파일이 다운되고나면 실행하자.(실행이라고 보는게 맞나?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-4.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;안드로이드 스튜디오 아이콘을 응용 프로그램 폴더로 옮겨주자&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 런치패드에 있는 안드로이드 스튜디오를 실행하면 안드로이드 스튜디오 셋팅을 가져올 것이냐고 물어본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-5.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;나 같은 경우엔 컴퓨터를 바꾸거나하는 경우에 기존 설정을 그대로 땡겨오는 것을 혐오 수준으로 싫어하기 때문에 기존에 체크된 &lt;b&gt;Do not import settings&lt;/b&gt;로 두고 넘어간다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;안드로이드 스튜디오 설치가 시작된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-6.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;버전 이름이 Bumblebee라 호박벌이 그려져있나보다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;안드로이드 스튜디오 사용 데이터 공유에 동의할건지 물어본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-7.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;개발자로서 이런 정보가 개발에 참 도움이 되는 건 알지만 그래도 내 정보만은 안된다는 마음으로 Don't send를 누르고 넘어가준다.&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;본격적인 설치과정이 시작된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-8.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;빠른 Next로 진행&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-9.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;난 아주 평범한 사람이기 때문에 Standard로 진행. 세부적인 설정을 하고싶은 사람은 Custom으로 가자.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-10.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;다크모드 vs 라이트모드&lt;/center&gt;
&lt;center&gt;참고로 본인은 어두워 죽어도 다크모드파이기 때문에 Darcula를 선택.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-11.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;빠른 Next로 진행&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-12.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;각각의 License Agreement에 동의해주어야한다.&lt;/center&gt;
&lt;center&gt;좌측의 Licenses 목록의 대주제 총 세가지에 대해서 클릭해서 Accept해주자.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-13.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;이런 느낌으로 세개 모두 Accept해주고 넘어가주자. (현 시점엔 세개지만, 나중엔 더 많을수도 더 적을수도 있다.)&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-14.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;그럼 여차저차 안드로이드 스튜디오가 설치를 시작한다.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-15.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;다운로드가 완료되면 로그를 보여준다. Finish를 눌러주자.&lt;/center&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/images/2022-02-19-android-studio/android-studio-2022-02-19-16.png&quot; /&gt;&lt;/p&gt;
&lt;center&gt;여기까지해서 안드로이드 스튜디오 설치가 끝났다.&lt;/center&gt;
&lt;center&gt;M1이 공식적으로 지원되지 않을때와 비교하면 이걸 굳이 글로 남길 필요가 있나 싶을 정도로 간단해졌다. 어쨋든 기록은 좋은거니까 남겨두도록 하자!&lt;/center&gt;</content><author><name>이단우</name></author><category term="맥 OS" /><category term="환경설정" /><category term="안드로이드" /><summary type="html">서론 M1 Pro가 탑재된 2021 맥북프로 16’를 구매해서, 환경설정을 다시 할 필요성이 있었다. 이전 M1 맥북에어 환경설정을 할 땐 이리저리 충돌난걸 ‘야매’로 고쳐서 겨우겨우 돌아가게 한 것들이 많았기 때문에 이번 기회에 깔끔하게 설치도 해보고, 그 기록을 남기고자 한다. 안드로이드 스튜디오 설치 최근 뜬금없이 안드로이드 앱 외주를 맡게 되었기 때문에 안드로이드 스튜디오를 깔 일이 생겼다. 리액트 네이티브 앱을 한창 개발 할 당시에는 인텔 맥을 쓰고 있어서 안드로이드 스튜디오를 까는 것이 신경쓰이는 일이 전혀 아니었는데, M1 맥 출시 초기에는 안드로이드 스튜디오가 지원이 안되는 치명적인 문제가 있었다. 그리고 그 뒤엔 어떤 개발자분께서 만든 M1 맥에서 돌아가는 버전을 썼는데 지금은 많은 개발자님들의 노고덕분에 아주 간단하게 설치할 수 있게 되었으니 빠르게 설치해보도록 하자!</summary></entry></feed>